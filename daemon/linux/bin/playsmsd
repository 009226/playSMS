#!/usr/bin/php -q
<?php
/**
 * This file is part of playSMS.
 *
 * playSMS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * playSMS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with playSMS.  If not, see <http://www.gnu.org/licenses/>.
 */
// Usage:
// playsmsd <COMMAND> <LOOP_FLAG> <CMD_PARAM>

error_reporting(0);

$ini = array();

$ini_files = array(
	'./playsmsd.conf',
	'~/playsmsd.conf',
	'/etc/playsmsd.conf',
	'/usr/local/etc/playsmsd.conf'
	);

$continue = FALSE;
foreach ($ini_files as $PLAYSMSD_CONF) {
	if (file_exists($PLAYSMSD_CONF)) {
		$ini = @parse_ini_file($PLAYSMSD_CONF);
		if ($ini['PLAYSMS_PATH'] && $ini['PLAYSMS_BIN'] && $ini['PLAYSMS_LOG']) {
			$continue = TRUE;
			break;
		}
	}
}

if (! $continue) {
	echo "Unable to find playsmsd.conf in current directory, home directory, /etc or in /usr/local/etc\n";
	exit();
}

// playSMS installation location
$PLAYSMS_INSTALL_PATH = ( $ini['PLAYSMS_PATH'] ? $ini['PLAYSMS_PATH'] : '/var/www/playsms' );

// playSMS lib location
$PLAYSMS_LIB_PATH = ( $ini['PLAYSMS_LIB'] ? $ini['PLAYSMS_LIB'] : '/var/lib/playsms' );

// playSMS daemon location
$PLAYSMS_DAEMON_PATH = ( $ini['PLAYSMS_BIN'] ? $ini['PLAYSMS_BIN'] : '/usr/local/bin' );

// playSMS log location
$PLAYSMS_LOG_PATH = ( $ini['PLAYSMS_LOG'] ? $ini['PLAYSMS_LOG'] : '/var/log/playsms' );

// set default DAEMON_SLEEP at 1 second
$DAEMON_SLEEP = ( $ini['DAEMON_SLEEP'] >= 1 ? $ini['DAEMON_SLEEP'] : 1 );

// set PHP script maximum execution time
$MAX_EXECUTION_TIME = ( $ini['MAX_EXECUTION_TIME'] >= 600 ? $ini['MAX_EXECUTION_TIME'] : 600 );

// set PHP error reporting level
$ERROR_REPORTING = ( isset($ini['ERROR_REPORTING']) ? $ini['ERROR_REPORTING'] : 'E_ALL ^ (E_NOTICE | E_WARNING)' );

set_time_limit($MAX_EXECUTION_TIME);

error_reporting($ERROR_REPORTING);

$core_config['daemon'] = $ini;

// Daemon service
$COMMAND = strtolower($argv[1]);

// Loop flag: loop => execute in a loop, once => execute only once
$LOOP_FLAG = ( strtolower($argv[2]) ? strtolower($argv[2]) : 'loop' );

// Service parameters
$CMD_PARAM = $argv[3];

// playsmsd
$PLAYSMSD_BIN = "$PLAYSMS_DAEMON_PATH/playsmsd";

switch ($COMMAND) {

	case 'start':
		if (playsmsd_isrunning()) {
			echo "playsmsd is already running\n";
			$pids = playsmsd_pids();
			echo "schedule at pid ".$pids['schedule']."\n";
			echo "dlrssmsd at pid ".$pids['dlrssmsd']."\n";
			echo "recvsmsd at pid ".$pids['recvsmsd']."\n";
			echo "sendsmsd at pid ".$pids['sendsmsd']."\n";
			exit();
		}

		// run playsmsd services
		shell_exec("nohup $PLAYSMSD_BIN schedule >/dev/null 2>&1 &");
		shell_exec("nohup $PLAYSMSD_BIN dlrssmsd >/dev/null 2>&1 &");
		shell_exec("nohup $PLAYSMSD_BIN recvsmsd >/dev/null 2>&1 &");
		shell_exec("nohup $PLAYSMSD_BIN sendsmsd >/dev/null 2>&1 &");
		
		if (playsmsd_isrunning()) {
			echo "playsmsd has been started\n";
			$pids = playsmsd_pids();
			echo "schedule at pid ".$pids['schedule']."\n";
			echo "dlrssmsd at pid ".$pids['dlrssmsd']."\n";
			echo "recvsmsd at pid ".$pids['recvsmsd']."\n";
			echo "sendsmsd at pid ".$pids['sendsmsd']."\n";
		} else {
			echo "Unable to start playsmsd\n";
		}
		exit();
		break;

	case 'stop':
		$pids = playsmsd_pids();
		foreach ($pids as $key => $val) {
			if ($key && $val) {
				echo $key." at pid ".$val." will be killed..\n";
				shell_exec("kill ".$val." >/dev/null 2>&1");
			}
		}
		if (playsmsd_isrunning()) {
			echo "Unable to stop playsmsd\n";
			$pids = playsmsd_pids();
			echo "schedule at pid ".$pids['schedule']."\n";
			echo "dlrssmsd at pid ".$pids['dlrssmsd']."\n";
			echo "recvsmsd at pid ".$pids['recvsmsd']."\n";
			echo "sendsmsd at pid ".$pids['sendsmsd']."\n";
		} else {
			echo "playsmsd has been stopped\n";
		}
		exit();
		break;

	case 'status':
		if (playsmsd_isrunning()) {
			echo "playsmsd is running\n";
			$pids = playsmsd_pids();
			echo "schedule at pid ".$pids['schedule']."\n";
			echo "dlrssmsd at pid ".$pids['dlrssmsd']."\n";
			echo "recvsmsd at pid ".$pids['recvsmsd']."\n";
			echo "sendsmsd at pid ".$pids['sendsmsd']."\n";
		} else {
			echo "playsmsd is not running\n";
		}
		exit();
		break;

	case 'check':
		echo "playsmsd installation check\n";
		echo "PLAYSMSD_CONF = " . $PLAYSMSD_CONF . "\n";
		echo "PLAYSMS_PATH = " . $PLAYSMS_INSTALL_PATH . "\n";
		echo "PLAYSMS_LIB = " . $PLAYSMS_LIB_PATH . "\n";
		echo "PLAYSMS_BIN = " . $PLAYSMS_DAEMON_PATH . "\n";
		echo "PLAYSMS_LOG = " . $PLAYSMS_LOG_PATH . "\n";
		echo "DAEMON_SLEEP = " . $DAEMON_SLEEP . "\n";
		echo "MAX_EXECUTION_TIME = " . $MAX_EXECUTION_TIME . "\n";
		echo "ERROR_REPORTING = " . $ERROR_REPORTING . "\n";
		echo shell_exec("$PLAYSMSD_BIN status");
		exit();
		break;

}

if (! $COMMAND) {
	echo "Usage: playsmsd <start|stop|status|check>\n";
	exit();
}

if (file_exists($PLAYSMS_INSTALL_PATH)) {
	chdir($PLAYSMS_INSTALL_PATH);

	// mark this process as a DAEMON_PROCESS
	$DAEMON_PROCESS = true;

	$continue = FALSE;
	if (file_exists('init.php')) {
		include 'init.php';
		$fn = $core_config['apps_path']['libs'] . '/function.php';
		if ($core_config['daemon_process'] && file_exists($fn)) {
			include $fn;
			if ($core_config['apps_path']['incs']) {
				$continue = TRUE;
			}
		}
	}

	if ($continue && $LOOP_FLAG == 'once') {

		// execute one time only

		// MAIN ONCE BLOCK

		echo $COMMAND . " start time:" . mktime() . "\n";
		
		if ($COMMAND == 'sendqueue') {
			if ($CMD_PARAM) {
				$param = explode('_', $CMD_PARAM);
				if (($param[0] == 'Q') && ($queue = $param[1])) {
					sendsmsd($queue, $core_config['sendsmsd_limit']);
				}
			}
		}

		// END OF ONCE BLOCK

		echo $COMMAND . " end time:" . mktime() . "\n";

		exit();

	} else if ($continue && $LOOP_FLAG == 'loop') {

		// execute in a loop

		$DAEMON_LOOPING = TRUE;

		while ($DAEMON_LOOPING) {

			echo $COMMAND . " start time:" . mktime() . "\n";

			// re-include init.php on every 'while' to get the most updated configurations
			include 'init.php';

			// MAIN LOOP BLOCK

			switch ($COMMAND) {

				case 'schedule':
					playsmsd();
					break;

				case 'dlrssmsd':
					dlrd();
					getsmsstatus();
					break;

				case 'recvsmsd':
					recvsmsd();
					getsmsinbox();
					break;

				case 'sendsmsd':
					$queue = array();
					$extras = '';
					if ((int) $core_config['sendsmsd_queue'] > 0) {
						$extras = array('LIMIT' => (int) $core_config['sendsmsd_queue']);
					}
					$list = dba_search(_DB_PREF_ . '_tblSMSOutgoing_queue', 'queue_code', array('flag' => '0'), '', $extras);
					foreach ($list as $db_row) {
						$queue[] = 'Q_' . $db_row['queue_code'];
					}
					if (count($queue) > 0) {
						foreach ($queue as $q) {
							$is_sending = ( playsmsd_pid_get($q) ? TRUE : FALSE );
							if (!$is_sending) {
								$RUN_THIS = "nohup $PLAYSMSD_BIN sendqueue once $q >/dev/null 2>&1 &";
								echo $COMMAND . " execute: " . $RUN_THIS . "\n";
								shell_exec($RUN_THIS);
							}
						}
					}
					break;

				default:
					$DAEMON_LOOPING = FALSE;

			}

			// END OF MAIN LOOP BLOCK

			echo $COMMAND . " end time:" . mktime() . "\n";

			sleep($DAEMON_SLEEP);

			// empty buffer
			ob_end_flush();

		} // while TRUE
	}
}


// functions


/**
 * Get pid for certain playsmsd process
 * @param  string $process process name
 * @return integer PID
 */
function playsmsd_pid_get($process) {
	return (int)shell_exec("ps f -C playsmsd | grep ".$process." | sed -e 's/^ *//' -e 's/ *$//' | cut -d' ' -f1 | tr -d '\n'");
}

/**
 * Get pids for all playsmsd main process
 * @return array PIDs
 */
function playsmsd_pids() {
	$pids['schedule'] = playsmsd_pid_get('schedule');
	$pids['dlrssmsd'] = playsmsd_pid_get('dlrssmsd');
	$pids['recvsmsd'] = playsmsd_pid_get('recvsmsd');
	$pids['sendsmsd'] = playsmsd_pid_get('sendsmsd');
	return $pids;
}

/**
 * Check whether or not playsmsd processes are running
 * @return boolean TRUE if all processes are running
 */
function playsmsd_isrunning() {
	$pids = playsmsd_pids();
	foreach ($pids as $pid) {
		if ($pid) {
			$isrunning = TRUE;
		} else {
			$isrunning = FALSE;
			break;
		}
	}
	return $isrunning;
}
